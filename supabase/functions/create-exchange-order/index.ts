// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

declare const Deno: {
  env: {
    get(key: string): string | undefined;
  };
};

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const ADMIN_TELEGRAM_CHAT_ID = Deno.env.get("ADMIN_TELEGRAM_CHAT_ID");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

async function sendTelegramMessage(chatId: string | number, text: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN || !chatId) {
    console.error("sendTelegramMessage failed: Missing token or chatId.", { chatId: chatId });
    return false;
  }

  try {
    const response = await fetch(TELEGRAM_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error(`Telegram API error for chatId ${chatId}. Status: ${response.status}`, errorData);
      return false;
    }
    
    console.log(`Successfully sent message to chatId ${chatId}.`);
    return true;
  } catch (error) {
    console.error(`Failed to send telegram message to ${chatId} due to a network or other error:`, error);
    return false;
  }
}

function formatOrderForTelegram(order: any, forAdmin: boolean): string {
  if (forAdmin) {
    const clientIdentifier = order.telegram_user_id ? `ID: ${order.telegram_user_id}` : '–ö–ª–∏–µ–Ω—Ç';
    const details = [
      `üòè –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!`,
      ``,
      `#${order.public_id}`,
      `–ö–ª–∏–µ–Ω—Ç: ${clientIdentifier}`,
      `-----------------------------------`,
      `–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
      `–û—Ç–ø—Ä–∞–≤–∏—Ç—å (VND): ${order.calculated_vnd.toLocaleString('vi-VN')}`,
      `-----------------------------------`,
      `–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: ${order.delivery_method === 'bank' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' : '–ù–∞–ª–∏—á–Ω—ã–µ'}`,
    ];

    if (order.payment_currency === 'USDT') {
      details.push(`–°–µ—Ç—å USDT: ${order.usdt_network}`);
    }

    if (order.delivery_method === 'bank') {
      details.push(`–ë–∞–Ω–∫: ${order.vnd_bank_name}`);
      details.push(`–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ${order.vnd_bank_account_number}`);
    } else {
      details.push(`–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.delivery_address}`);
    }

    if (order.contact_phone) {
      details.push(`–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: ${order.contact_phone}`);
    }
    
    details.push(`-----------------------------------`);
    details.push(`–°—Ç–∞—Ç—É—Å: ${order.status}`);

    return details.join('\n');
  } else {
    const firstName = order.telegram_user_first_name ? ` ${order.telegram_user_first_name}` : '';
    const title = `*ü•∞${firstName} –í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!*`;
    
    const details = [
      title,
      `#${order.public_id}`,
      `-----------------------------------`,
      `–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
      `–ö –ø–æ–ª—É—á–µ–Ω–∏—é (VND): ${order.calculated_vnd.toLocaleString('vi-VN')}`,
    ];

    if (order.payment_currency === 'USDT' && order.deposit_address && order.deposit_address !== 'N/A') {
      details.push(``);
      details.push(`–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:`);
      details.push(`\`${order.deposit_address}\``);
      details.push(`–°–µ—Ç—å USDT: ${order.usdt_network}`);
      details.push(``);
      details.push(`–í–Ω–∏–º–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ ${order.usdt_network}. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ —É—Ç–µ—Ä—è–Ω—ã.`);
    }

    details.push(`-----------------------------------`);
    details.push(`–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: ${order.delivery_method === 'bank' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' : '–ù–∞–ª–∏—á–Ω—ã–µ'}`);

    if (order.delivery_method === 'bank') {
      details.push(`–ë–∞–Ω–∫: ${order.vnd_bank_name}`);
      details.push(`–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ${order.vnd_bank_account_number}`);
    } else if (order.delivery_method === 'cash') {
        details.push(`–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.delivery_address}`);
    }
    
    details.push(`-----------------------------------`);
    details.push(`–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–ù–µ –æ–ø–ª–∞—á–µ–Ω)`);

    return details.join('\n');
  }
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    const body = await req.json();
    const orderData = body.orderData;
    
    const publicId = `ORD-${Date.now()}-${Math.floor(Math.random() * 10000)}`;

    const insertData = {
      payment_currency: orderData.paymentCurrency,
      from_amount: orderData.fromAmount,
      calculated_vnd: orderData.calculatedVND,
      exchange_rate: orderData.exchangeRate,
      delivery_method: orderData.deliveryMethod,
      usdt_network: orderData.usdtNetwork ?? null,
      vnd_bank_name: orderData.vndBankName ?? null,
      vnd_bank_account_number: orderData.vndBankAccountNumber ?? null,
      delivery_address: orderData.deliveryAddress ?? null,
      contact_phone: orderData.contactPhone ?? null,
      public_id: publicId,
      status: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
      created_at: new Date().toISOString(),
      telegram_user_id: orderData.telegramUserId ?? null,
    };

    const { data: insertedOrder, error: insertError } = await supabase
      .from("orders")
      .insert(insertData)
      .select()
      .single();

    if (insertError) {
      console.error("Insert error:", insertError);
      return new Response(
        JSON.stringify({ error: insertError.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const fullOrderDetailsForNotification = {
        ...insertedOrder,
        telegram_user_first_name: orderData.telegramUserFirstName,
        deposit_address: orderData.depositAddress,
    };

    // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---

    // 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ö–õ–ò–ï–ù–¢–£ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    let clientNotificationStatus = "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID –Ω–µ –ø–æ–ª—É—á–µ–Ω).";
    if (insertedOrder.telegram_user_id) {
      const clientMessage = formatOrderForTelegram(fullOrderDetailsForNotification, false);
      const wasClientNotified = await sendTelegramMessage(insertedOrder.telegram_user_id, clientMessage);

      if (wasClientNotified) {
        clientNotificationStatus = `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (ID: ${insertedOrder.telegram_user_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`;
      } else {
        clientNotificationStatus = `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É (ID: ${insertedOrder.telegram_user_id}).`;
      }
    }

    // 2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    if (ADMIN_TELEGRAM_CHAT_ID) {
      let adminMessage = formatOrderForTelegram(fullOrderDetailsForNotification, true);
      adminMessage += `\n\n---\n*–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n${clientNotificationStatus}`;
      await sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, adminMessage);
    } else {
      console.warn("ADMIN_TELEGRAM_CHAT_ID is not set. Cannot send admin notification.");
    }

    return new Response(
      JSON.stringify(insertedOrder),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Unexpected error:", error);
    return new Response(
      JSON.stringify({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});