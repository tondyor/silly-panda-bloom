// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

declare const Deno: {
  env: {
    get(key: string): string | undefined;
  };
};

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const ADMIN_TELEGRAM_CHAT_ID = Deno.env.get("ADMIN_TELEGRAM_CHAT_ID");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

async function sendTelegramMessage(chatId: string | number, text: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN || !chatId) {
    console.error("sendTelegramMessage failed: Missing token or chatId.", { chatId: chatId });
    return false;
  }

  try {
    const response = await fetch(TELEGRAM_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error(`Telegram API error for chatId ${chatId}. Status: ${response.status}. Full error:`, JSON.stringify(errorData, null, 2));
      return false;
    }
    
    console.log(`Successfully sent message to chatId ${chatId}.`);
    return true;
  } catch (error) {
    console.error(`Failed to send telegram message to ${chatId} due to a network or other error:`, error);
    return false;
  }
}

function formatOrderForClient(order: any): string {
  const firstName = order.telegram_user_first_name ? ` ${order.telegram_user_first_name}` : '';
  const title = `*üéâ${firstName}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*`;
  
  const details = [
    title,
    ``,
    `üìã *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${order.public_id}`,
    `üí∞ *–°—É–º–º–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:* ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
    `üíµ *–ö –ø–æ–ª—É—á–µ–Ω–∏—é:* ${order.calculated_vnd.toLocaleString('vi-VN')} VND`,
    `üìä *–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:* 1 ${order.payment_currency} = ${Math.round(order.exchange_rate).toLocaleString('vi-VN')} VND`,
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è USDT
  if (order.payment_currency === 'USDT' && order.deposit_address && order.deposit_address !== 'N/A') {
    details.push(``);
    details.push(`üí≥ *–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*`);
    details.push(`\`${order.deposit_address}\``);
    details.push(`üåê *–°–µ—Ç—å USDT:* ${order.usdt_network}`);
    details.push(``);
    details.push(`‚ö†Ô∏è *–í–∞–∂–Ω–æ!* –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ ${order.usdt_network}. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ —É—Ç–µ—Ä—è–Ω—ã.`);
  }

  details.push(``, `üìã *–î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è:*`);
  details.push(`üöö *–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* ${order.delivery_method === 'bank' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' : '–ù–∞–ª–∏—á–Ω—ã–µ'}`);

  if (order.delivery_method === 'bank') {
    details.push(`üè¶ *–ë–∞–Ω–∫:* ${order.vnd_bank_name}`);
    details.push(`üí≥ *–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:* ${order.vnd_bank_account_number}`);
  } else if (order.delivery_method === 'cash') {
    details.push(`üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.delivery_address}`);
  }

  if (order.contact_phone) {
    details.push(`üìû *–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:* ${order.contact_phone}`);
  }
  
  details.push(``, `üìà *–°—Ç–∞—Ç—É—Å:* –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã)`);
  details.push(``, `–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!`);

  return details.join('\n');
}

function formatOrderForAdmin(order: any): string {
  const clientIdentifier = order.telegram_id ? `@id${order.telegram_id}` : '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';
  const clientName = order.telegram_user_first_name ? ` (${order.telegram_user_first_name})` : '';
  
  const details = [
    `üîî *–ù–û–í–´–ô –ó–ê–ö–ê–ó*`,
    ``,
    `üìã *ID –∑–∞—è–≤–∫–∏:* #${order.public_id}`,
    `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${clientIdentifier}${clientName}`,
    ``,
    `üí∞ *–î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:*`,
    `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
    `‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç: ${order.calculated_vnd.toLocaleString('vi-VN')} VND`,
    `‚Ä¢ –ö—É—Ä—Å: 1 ${order.payment_currency} = ${Math.round(order.exchange_rate).toLocaleString('vi-VN')} VND`,
  ];

  if (order.payment_currency === 'USDT') {
    details.push(`‚Ä¢ –°–µ—Ç—å USDT: ${order.usdt_network}`);
    if (order.deposit_address && order.deposit_address !== 'N/A') {
      details.push(`‚Ä¢ –ö–æ—à–µ–ª–µ–∫: \`${order.deposit_address}\``);
    }
  }

  details.push(``, `üìã *–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:*`);
  details.push(`‚Ä¢ –°–ø–æ—Å–æ–±: ${order.delivery_method === 'bank' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' : '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏'}`);

  if (order.delivery_method === 'bank') {
    details.push(`‚Ä¢ –ë–∞–Ω–∫: ${order.vnd_bank_name}`);
    details.push(`‚Ä¢ –°—á–µ—Ç: ${order.vnd_bank_account_number}`);
  } else {
    details.push(`‚Ä¢ –ê–¥—Ä–µ—Å: ${order.delivery_address}`);
  }

  if (order.contact_phone) {
    details.push(`‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${order.contact_phone}`);
  }
  
  details.push(``, `üìÖ *–°–æ–∑–¥–∞–Ω:* ${new Date(order.created_at).toLocaleString('ru-RU')}`);
  details.push(`üìà *–°—Ç–∞—Ç—É—Å:* ${order.status}`);

  return details.join('\n');
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    const body = await req.json();
    const orderData = body.orderData;
    
    console.log("Received orderData with telegramId:", orderData.telegramId);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞
    const publicId = `ORD-${Date.now()}-${Math.floor(Math.random() * 10000)}`;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É
    const insertData = {
      payment_currency: orderData.paymentCurrency,
      from_amount: orderData.fromAmount,
      calculated_vnd: orderData.calculatedVND,
      exchange_rate: orderData.exchangeRate,
      delivery_method: orderData.deliveryMethod,
      usdt_network: orderData.usdtNetwork ?? null,
      vnd_bank_name: orderData.vndBankName ?? null,
      vnd_bank_account_number: orderData.vndBankAccountNumber ?? null,
      delivery_address: orderData.deliveryAddress ?? null,
      contact_phone: orderData.contactPhone ?? null,
      public_id: publicId,
      status: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
      created_at: new Date().toISOString(),
      telegram_id: orderData.telegramId ?? null,
    };

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: insertedOrder, error: insertError } = await supabase
      .from("orders")
      .insert(insertData)
      .select()
      .single();

    if (insertError) {
      console.error("Insert error:", insertError);
      return new Response(
        JSON.stringify({ error: insertError.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    console.log("Order created successfully:", insertedOrder.public_id);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const fullOrderDetails = {
      ...insertedOrder,
      telegram_user_first_name: orderData.telegramUserFirstName,
      deposit_address: orderData.depositAddress,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationResults = {
      clientNotified: false,
      adminNotified: false,
      clientError: null as string | null,
      adminError: null as string | null,
    };

    // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    if (insertedOrder.telegram_id) {
      console.log("Sending notification to client:", insertedOrder.telegram_id);
      const clientMessage = formatOrderForClient(fullOrderDetails);
      const clientSuccess = await sendTelegramMessage(insertedOrder.telegram_id, clientMessage);
      
      notificationResults.clientNotified = clientSuccess;
      if (!clientSuccess) {
        notificationResults.clientError = `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (ID: ${insertedOrder.telegram_id})`;
      }
    } else {
      notificationResults.clientError = "Telegram ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω";
    }

    // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (ADMIN_TELEGRAM_CHAT_ID) {
      console.log("Sending notification to admin:", ADMIN_TELEGRAM_CHAT_ID);
      
      let adminMessage = formatOrderForAdmin(fullOrderDetails);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
      adminMessage += `\n\nüìä *–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n`;
      
      if (notificationResults.clientNotified) {
        adminMessage += `‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω (ID: ${insertedOrder.telegram_id})`;
      } else {
        adminMessage += `‚ùå ${notificationResults.clientError}`;
      }
      
      const adminSuccess = await sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, adminMessage);
      
      notificationResults.adminNotified = adminSuccess;
      if (!adminSuccess) {
        notificationResults.adminError = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É";
      }
    } else {
      console.warn("ADMIN_TELEGRAM_CHAT_ID is not set. Cannot send admin notification.");
      notificationResults.adminError = "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω";
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log("Notification results:", notificationResults);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
    return new Response(
      JSON.stringify({
        ...insertedOrder,
        notificationStatus: notificationResults
      }),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    console.error("Unexpected error:", error);
    return new Response(
      JSON.stringify({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
