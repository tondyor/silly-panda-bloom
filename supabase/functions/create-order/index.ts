// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

// CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Supabase
// @ts-ignore
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
// @ts-ignore
const ADMIN_TELEGRAM_CHAT_ID = Deno.env.get("ADMIN_TELEGRAM_CHAT_ID");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram WebApp ---
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram —Å –ø–æ–º–æ—â—å—é HMAC-SHA256.
 * @param initData –°—Ç—Ä–æ–∫–∞ initData –∏–∑ Telegram WebApp.
 * @returns {Promise<boolean>} True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ª–∏–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ false.
 */
async function validateTelegramData(initData: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN) {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return false;
  }

  const params = new URLSearchParams(initData);
  const hash = params.get("hash");
  if (!hash) return false;

  params.delete("hash");
  const dataCheckArr: string[] = [];
  for (const [key, value] of params.entries()) {
    dataCheckArr.push(`${key}=${value}`);
  }
  dataCheckArr.sort();
  const dataCheckString = dataCheckArr.join("\n");

  const encoder = new TextEncoder();

  // 1. –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  const secretKey = await crypto.subtle.importKey(
    "raw",
    encoder.encode("WebAppData"),
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"]
  );
  const secret = await crypto.subtle.sign("HMAC", secretKey, encoder.encode(TELEGRAM_BOT_TOKEN));

  // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const finalKey = await crypto.subtle.importKey(
    "raw",
    secret,
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"]
  );
  const signatureBuffer = await crypto.subtle.sign("HMAC", finalKey, encoder.encode(dataCheckString));
  
  // 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤ hex-—Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const hashArray = Array.from(new Uint8Array(signatureBuffer));
  const calculatedHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

  return hash === calculatedHash;
}

// --- –ù–û–í–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.
 * @param text –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 * @returns –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
 */
function escapeMarkdownV2(text: string | number): string {
  const str = String(text);
  // –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ MarkdownV2
  const charsToEscape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
  let escapedText = str;
  for (const char of charsToEscape) {
    escapedText = escapedText.replace(new RegExp(`\\${char}`, 'g'), `\\${char}`);
  }
  return escapedText;
}


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram API ---
/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç Telegram.
 * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
 * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown.
 * @param reply_markup –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫.
 * @returns {Promise<any>} –û—Ç–≤–µ—Ç –æ—Ç Telegram API, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π message_id.
 */
async function sendMessage(chatId: string | number, text: string, reply_markup?: any): Promise<any> {
  try {
    console.log(`Attempting to send message to chat ID: ${chatId}`);
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'MarkdownV2', reply_markup }),
    });
    if (!response.ok) {
      const errorData = await response.json();
      console.error(`–û—à–∏–±–∫–∞ Telegram API (sendMessage) –¥–ª—è chatId ${chatId}:`, JSON.stringify(errorData, null, 2));
      return null;
    }
    return await response.json();
  } catch (e) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è ${chatId}:`, e);
    return null;
  }
}

// --- –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã ---
const translations: Record<string, Record<string, string>> = {
  ru: {
    orderAcceptedTitle: "ü•∞{{firstName}}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
    orderNumber: "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
    youSend: "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ:",
    toReceive: "–ö –ø–æ–ª—É—á–µ–Ω–∏—é (VND):",
    depositWallet: "–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
    usdtNetwork: "–°–µ—Ç—å USDT:",
    attention: "–í–Ω–∏–º–∞–Ω–∏–µ!",
    sendOnlyUsdtWarning: "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ {{network}}. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ —É—Ç–µ—Ä—è–Ω—ã.",
    status: "–°—Ç–∞—Ç—É—Å:",
    newApplication: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–ù–µ –æ–ø–ª–∞—á–µ–Ω)",
    contactSoon: "–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
    adminNewOrder: "üòè *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*",
    client: "–ö–ª–∏–µ–Ω—Ç:",
    exchangeRate: "–ö—É—Ä—Å:",
    deliveryMethod: "–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
    bankTransfer: "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
    cash: "–ù–∞–ª–∏—á–Ω—ã–µ",
    bank: "–ë–∞–Ω–∫:",
    accountNumber: "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:",
    deliveryAddress: "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
    contactPhone: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:",
  },
  en: {
    orderAcceptedTitle: "ü•∞{{firstName}}, your application has been accepted!",
    orderNumber: "Order number:",
    youSend: "You send:",
    toReceive: "To receive (VND):",
    depositWallet: "Deposit wallet:",
    usdtNetwork: "USDT Network:",
    attention: "Attention!",
    sendOnlyUsdtWarning: "Send funds only to the specified address on the {{network}} network. Otherwise, your funds may be lost forever.",
    status: "Status:",
    newApplication: "New application (Unpaid)",
    contactSoon: "We will contact you soon for confirmation.",
    adminNewOrder: "üòè *New order!*",
    client: "Client:",
    exchangeRate: "Exchange rate:",
    deliveryMethod: "Delivery method:",
    bankTransfer: "Bank transfer",
    cash: "Cash",
    bank: "Bank:",
    accountNumber: "Account number:",
    deliveryAddress: "Delivery address:",
    contactPhone: "Contact phone:",
  },
  vi: {
    orderAcceptedTitle: "ü•∞{{firstName}}, ƒë∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n!",
    orderNumber: "M√£ ƒë∆°n h√†ng:",
    youSend: "B·∫°n g·ª≠i:",
    toReceive: "Nh·∫≠n (VND):",
    depositWallet: "V√≠ n·∫°p ti·ªÅn:",
    usdtNetwork: "M·∫°ng USDT:",
    attention: "Ch√∫ √Ω!",
    sendOnlyUsdtWarning: "Ch·ªâ g·ª≠i ti·ªÅn USDT ƒë·∫øn ƒë·ªãa ch·ªâ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh tr√™n m·∫°ng {{network}}. N·∫øu kh√¥ng, ti·ªÅn c·ªßa b·∫°n c√≥ th·ªÉ b·ªã m·∫•t vƒ©nh vi·ªÖn.",
    status: "Tr·∫°ng th√°i:",
    newApplication: "ƒê∆°n h√†ng m·ªõi (Ch∆∞a thanh to√°n)",
    contactSoon: "Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm ƒë·ªÉ x√°c nh·∫≠n.",
    adminNewOrder: "üòè *ƒê∆°n h√†ng m·ªõi!*",
    client: "Kh√°ch h√†ng:",
    exchangeRate: "T·ª∑ gi√°:",
    deliveryMethod: "Ph∆∞∆°ng th·ª©c nh·∫≠n:",
    bankTransfer: "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
    cash: "Ti·ªÅn m·∫∑t",
    bank: "Ng√¢n h√†ng:",
    accountNumber: "S·ªë t√†i kho·∫£n:",
    deliveryAddress: "ƒê·ªãa ch·ªâ giao h√†ng:",
    contactPhone: "S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá:",
  },
};

function getTranslation(lang: string, key: string, params?: Record<string, string>): string {
  const selectedLang = translations[lang] || translations['en']; // Fallback to English
  let text = selectedLang[key] || translations['en'][key] || key; // Fallback to English key or key itself
  
  if (params) {
    for (const pKey in params) {
      text = text.replace(new RegExp(`{{${pKey}}}`, 'g'), params[pKey]);
    }
  }
  return text;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.
 * @param order –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞.
 * @param forAdmin –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞.
 * @param lang –Ø–∑—ã–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
function formatOrderForTelegram(order: any, forAdmin: boolean, lang: string): string {
  const locale = lang === 'vi' ? 'vi-VN' : 'ru-RU'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'ru-RU' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, 'vi-VN' –¥–ª—è –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–≥–æ

  if (forAdmin) {
    const clientUsername = escapeMarkdownV2(order.telegram_username || 'N/A');
    const clientIdentifier = order.telegram_id ? `ID: ${order.telegram_id} (@${clientUsername})` : escapeMarkdownV2(getTranslation(lang, 'client'));
    const publicId = escapeMarkdownV2(order.public_id);
    const bankName = escapeMarkdownV2(order.vnd_bank_name || '');
    const bankAccountNumber = escapeMarkdownV2(order.vnd_bank_account_number || '');
    const deliveryAddress = escapeMarkdownV2(order.delivery_address || '');
    const contactPhone = escapeMarkdownV2(order.contact_phone || '');

    const details = [
      escapeMarkdownV2(getTranslation(lang, 'adminNewOrder')),
      ``,
      `${escapeMarkdownV2(getTranslation(lang, 'orderNumber'))} \`#${publicId}\``,
      `${escapeMarkdownV2(getTranslation(lang, 'client'))} ${clientIdentifier}`,
      escapeMarkdownV2(`-----------------------------------`),
      `${escapeMarkdownV2(getTranslation(lang, 'youSend'))} ${order.from_amount.toLocaleString(locale)} ${order.payment_currency}`,
      `${escapeMarkdownV2(getTranslation(lang, 'toReceive'))} ${order.calculated_vnd.toLocaleString('vi-VN')}`, // VND –≤—Å–µ–≥–¥–∞ –≤ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      `${escapeMarkdownV2(getTranslation(lang, 'exchangeRate'))} ${order.exchange_rate.toLocaleString(locale)}`,
      escapeMarkdownV2(`-----------------------------------`),
      `${escapeMarkdownV2(getTranslation(lang, 'deliveryMethod'))} ${order.delivery_method === 'bank' ? escapeMarkdownV2(getTranslation(lang, 'bankTransfer')) : escapeMarkdownV2(getTranslation(lang, 'cash'))}`,
    ];

    if (order.payment_currency === 'USDT') {
      details.push(`${escapeMarkdownV2(getTranslation(lang, 'usdtNetwork'))} ${order.usdt_network}`);
    }

    if (order.delivery_method === 'bank') {
      details.push(`${escapeMarkdownV2(getTranslation(lang, 'bank'))} ${bankName}`);
      details.push(`${escapeMarkdownV2(getTranslation(lang, 'accountNumber'))} \`${bankAccountNumber}\``);
    } else {
      details.push(`${escapeMarkdownV2(getTranslation(lang, 'deliveryAddress'))} ${deliveryAddress}`);
    }

    if (order.contact_phone) {
      details.push(`${escapeMarkdownV2(getTranslation(lang, 'contactPhone'))} ${contactPhone}`);
    }
    
    details.push(escapeMarkdownV2(`-----------------------------------`));
    details.push(`${escapeMarkdownV2(getTranslation(lang, 'status'))} ${escapeMarkdownV2(order.status)}`);

    return details.join('\n');
  } else {
    const escapedFirstName = escapeMarkdownV2(order.telegram_user_first_name || '');
    const firstNameForTitle = escapedFirstName ? ` ${escapedFirstName}` : '';
    const title = getTranslation(lang, 'orderAcceptedTitle', { firstName: firstNameForTitle }); // Title is already escaped via firstNameForTitle
    const publicId = escapeMarkdownV2(order.public_id);
    const depositAddress = escapeMarkdownV2(order.deposit_address || '');
    
    const details = [
      title,
      `${escapeMarkdownV2(getTranslation(lang, 'orderNumber'))} \`#${publicId}\``,
      escapeMarkdownV2(`-----------------------------------`),
      `${escapeMarkdownV2(getTranslation(lang, 'youSend'))} ${order.from_amount.toLocaleString(locale)} ${order.payment_currency}`,
      `${escapeMarkdownV2(getTranslation(lang, 'toReceive'))} ${order.calculated_vnd.toLocaleString('vi-VN')}`, // VND –≤—Å–µ–≥–¥–∞ –≤ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    ];

    if (order.payment_currency === 'USDT' && order.deposit_address && order.deposit_address !== 'N/A') {
      details.push(``);
      details.push(escapeMarkdownV2(getTranslation(lang, 'depositWallet')));
      details.push(`\`${depositAddress}\``);
      details.push(`${escapeMarkdownV2(getTranslation(lang, 'usdtNetwork'))} ${order.usdt_network}`);
      details.push(``);
      details.push(`*${escapeMarkdownV2(getTranslation(lang, 'attention'))}* ${escapeMarkdownV2(getTranslation(lang, 'sendOnlyUsdtWarning', { network: order.usdt_network }))}`);
    }

    details.push(escapeMarkdownV2(`-----------------------------------`));
    details.push(`${escapeMarkdownV2(getTranslation(lang, 'status'))} ${escapeMarkdownV2(getTranslation(lang, 'newApplication'))}`);
    details.push(``);
    details.push(escapeMarkdownV2(getTranslation(lang, 'contactSoon')));

    return details.join('\n');
  }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS-–ø—Ä–µ–¥–∑–∞–ø—Ä–æ—Å–∞
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  console.log("--- Invoking create-order function ---");

  try {
    // 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { initData, formData } = await req.json();
    if (!initData || !formData) {
      console.error("Validation Error: Missing initData or formData in request body.");
      return new Response(JSON.stringify({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç initData –∏–ª–∏ formData" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }
    console.log("Step 1: Request body parsed successfully.");

    // 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    const isTelegramDataValid = await validateTelegramData(initData);
    if (!isTelegramDataValid) {
      console.error("Authentication Error: Invalid initData received.");
      return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–µ initData" }), {
        status: 401,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }
    console.log("Step 2: Telegram data validated successfully.");

    // 3. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
    const params = new URLSearchParams(initData);
    const user = JSON.parse(params.get("user")!);

    if (!user || !user.id) {
        console.error("Data Error: Could not extract user data from initData.");
        return new Response(JSON.stringify({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData" }), {
            status: 400,
            headers: { ...corsHeaders, "Content-Type": "application/json" },
        });
    }
    console.log(`Step 3: User data parsed. User ID: ${user.id}, Username: ${user.username || 'N/A'}`);

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–ª—é—á–æ–º
    const supabase = createClient(
      // @ts-ignore
      Deno.env.get("SUPABASE_URL")!,
      // @ts-ignore
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );
    console.log("Step 4: Supabase client created.");

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ telegram_profiles
    const { data: userProfile, error: profileError } = await supabase
      .from('telegram_profiles')
      .select('language_code')
      .eq('telegram_id', user.id)
      .single();

    let userLang = 'en'; // Default to English
    if (userProfile && userProfile.language_code && ['ru', 'en', 'vi'].includes(userProfile.language_code)) {
      userLang = userProfile.language_code;
    } else if (user.language_code && ['ru', 'en', 'vi'].includes(user.language_code)) {
      userLang = user.language_code;
    }
    console.log(`Step 5: User language determined as ${userLang}.`);

    // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const publicId = `ORD-${Date.now()}`;
    const orderToInsert = {
      payment_currency: formData.paymentCurrency,
      from_amount: formData.fromAmount,
      calculated_vnd: formData.calculatedVND,
      exchange_rate: formData.exchangeRate,
      delivery_method: formData.deliveryMethod,
      usdt_network: formData.usdtNetwork ?? null,
      vnd_bank_name: formData.vndBankName ?? null,
      vnd_bank_account_number: formData.vndBankAccountNumber ?? null,
      delivery_address: formData.deliveryAddress ?? null,
      contact_phone: formData.contactPhone ?? null,
      public_id: publicId,
      status: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
      telegram_id: user.id,
    };

    const { data: insertedOrder, error: insertError } = await supabase
      .from("orders")
      .insert(orderToInsert)
      .select()
      .single();

    if (insertError) {
      console.error("Database Error: Failed to insert order.", insertError);
      throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${insertError.message}`);
    }
    console.log(`Step 6: Order #${publicId} created successfully in database.`);

    // 7. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const fullOrderDetailsForNotification = {
        ...insertedOrder,
        telegram_user_first_name: user.first_name,
        telegram_username: user.username,
        deposit_address: formData.depositAddress,
    };
    
    const clientMessageText = formatOrderForTelegram(fullOrderDetailsForNotification, false, userLang);
    console.log("Step 7: Notification data prepared.");

    // 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    // 8a. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —è–∑—ã–∫–∞
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: 'RU', callback_data: `lang_ru_${insertedOrder.public_id}` },
          { text: 'EN', callback_data: `lang_en_${insertedOrder.public_id}` },
          { text: 'VIET', callback_data: `lang_vi_${insertedOrder.public_id}` },
        ]
      ]
    };

    const clientMessageResponse = await sendMessage(user.id, clientMessageText, inlineKeyboard);
    if (clientMessageResponse && clientMessageResponse.ok) {
      const messageId = clientMessageResponse.result.message_id;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∏ chat_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const { error: saveMessageError } = await supabase
        .from('order_messages')
        .insert({
          chat_id: user.id,
          message_id: messageId,
          order_id: insertedOrder.id,
          telegram_id: user.id,
        });
      if (saveMessageError) {
        console.error("Database Error: Failed to save telegram message ID.", saveMessageError);
      }
      console.log(`Step 8a: Sent direct message to user ${user.id} with message_id ${messageId}.`);
    } else {
      console.error(`Step 8a: Failed to send direct message to user ${user.id}. Response:`, JSON.stringify(clientMessageResponse, null, 2));
    }

    // 8b. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log(`Step 8b: ADMIN_TELEGRAM_CHAT_ID value: '${ADMIN_TELEGRAM_CHAT_ID}'`); // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (ADMIN_TELEGRAM_CHAT_ID && ADMIN_TELEGRAM_CHAT_ID.trim() !== '') {
      console.log(`Attempting to send admin notification to chat ID: ${ADMIN_TELEGRAM_CHAT_ID}`);
      const adminMessage = formatOrderForTelegram(fullOrderDetailsForNotification, true, 'ru'); // Admin message always in Russian
      const adminMessageResponse = await sendMessage(ADMIN_TELEGRAM_CHAT_ID, adminMessage);
      if (adminMessageResponse && adminMessageResponse.ok) {
        console.log(`Step 8b: Sent notification to admin chat. Response:`, JSON.stringify(adminMessageResponse, null, 2));
      } else {
        console.error(`Step 8b: Failed to send notification to admin chat. Response:`, JSON.stringify(adminMessageResponse, null, 2));
      }
    } else {
      console.warn("ADMIN_TELEGRAM_CHAT_ID is not set or is empty. Admin notification skipped.");
    }

    // 9. –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    console.log("--- create-order function finished successfully ---");
    return new Response(JSON.stringify(insertedOrder), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("--- CRITICAL ERROR in create-order function ---", error);
    return new Response(JSON.stringify({ error: error.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});