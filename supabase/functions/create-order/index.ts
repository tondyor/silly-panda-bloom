// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

// CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Supabase
// @ts-ignore
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
// @ts-ignore
const ADMIN_TELEGRAM_CHAT_ID = Deno.env.get("ADMIN_TELEGRAM_CHAT_ID");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram WebApp ---
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram —Å –ø–æ–º–æ—â—å—é HMAC-SHA256.
 * @param initData –°—Ç—Ä–æ–∫–∞ initData –∏–∑ Telegram WebApp.
 * @returns {Promise<boolean>} True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ª–∏–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ false.
 */
async function validateTelegramData(initData: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN) {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return false;
  }

  const params = new URLSearchParams(initData);
  const hash = params.get("hash");
  if (!hash) return false;

  params.delete("hash");
  const dataCheckArr: string[] = [];
  for (const [key, value] of params.entries()) {
    dataCheckArr.push(`${key}=${value}`);
  }
  dataCheckArr.sort();
  const dataCheckString = dataCheckArr.join("\n");

  const encoder = new TextEncoder();

  // 1. –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  const secretKey = await crypto.subtle.importKey(
    "raw",
    encoder.encode("WebAppData"),
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"]
  );
  const secret = await crypto.subtle.sign("HMAC", secretKey, encoder.encode(TELEGRAM_BOT_TOKEN));

  // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const finalKey = await crypto.subtle.importKey(
    "raw",
    secret,
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"]
  );
  const signatureBuffer = await crypto.subtle.sign("HMAC", finalKey, encoder.encode(dataCheckString));
  
  // 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤ hex-—Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const hashArray = Array.from(new Uint8Array(signatureBuffer));
  const calculatedHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

  return hash === calculatedHash;
}


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram API ---
/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç Telegram.
 * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
 * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown.
 */
async function sendMessage(chatId: string | number, text: string): Promise<void> {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' }),
    });
    if (!response.ok) {
      const errorData = await response.json();
      console.error(`–û—à–∏–±–∫–∞ Telegram API (sendMessage) –¥–ª—è chatId ${chatId}:`, JSON.stringify(errorData, null, 2));
    }
  } catch (e) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è ${chatId}:`, e);
  }
}

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å WebApp, –æ–±—ã—á–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param queryId web_app_query_id –∏–∑ initData.
 * @param result –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞.
 */
async function answerWebAppQuery(queryId: string, result: any): Promise<void> {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/answerWebAppQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ web_app_query_id: queryId, result }),
    });
    if (!response.ok) {
      const errorData = await response.json();
      console.error(`–û—à–∏–±–∫–∞ Telegram API (answerWebAppQuery) –¥–ª—è queryId ${queryId}:`, JSON.stringify(errorData, null, 2));
    }
  } catch(e) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å WebApp ${queryId}:`, e);
  }
}

// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.
 * @param order –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞.
 * @param forAdmin –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
function formatOrderForTelegram(order: any, forAdmin: boolean): string {
  if (forAdmin) {
    const clientIdentifier = order.telegram_id ? `ID: ${order.telegram_id} (@${order.telegram_username || 'N/A'})` : '–ö–ª–∏–µ–Ω—Ç';
    const details = [
      `üòè *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*`,
      ``,
      `*–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* \`#${order.public_id}\``,
      `*–ö–ª–∏–µ–Ω—Ç:* ${clientIdentifier}`,
      `-----------------------------------`,
      `*–û—Ç–¥–∞–µ—Ç:* ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
      `*–ü–æ–ª—É—á–∞–µ—Ç (VND):* ${order.calculated_vnd.toLocaleString('vi-VN')}`,
      `*–ö—É—Ä—Å:* ${order.exchange_rate.toLocaleString('ru-RU')}`,
      `-----------------------------------`,
      `*–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:* ${order.delivery_method === 'bank' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' : '–ù–∞–ª–∏—á–Ω—ã–µ'}`,
    ];

    if (order.payment_currency === 'USDT') {
      details.push(`*–°–µ—Ç—å USDT:* ${order.usdt_network}`);
    }

    if (order.delivery_method === 'bank') {
      details.push(`*–ë–∞–Ω–∫:* ${order.vnd_bank_name}`);
      details.push(`*–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:* \`${order.vnd_bank_account_number}\``);
    } else {
      details.push(`*–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.delivery_address}`);
    }

    if (order.contact_phone) {
      details.push(`*–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:* ${order.contact_phone}`);
    }
    
    details.push(`-----------------------------------`);
    details.push(`*–°—Ç–∞—Ç—É—Å:* ${order.status}`);

    return details.join('\n');
  } else {
    const firstName = order.telegram_user_first_name ? ` ${order.telegram_user_first_name}` : '';
    const title = `*ü•∞${firstName}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*`;
    
    const details = [
      title,
      `*–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* \`#${order.public_id}\``,
      `-----------------------------------`,
      `*–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ:* ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
      `*–ö –ø–æ–ª—É—á–µ–Ω–∏—é (VND):* ${order.calculated_vnd.toLocaleString('vi-VN')}`,
    ];

    if (order.payment_currency === 'USDT' && order.deposit_address && order.deposit_address !== 'N/A') {
      details.push(``);
      details.push(`*–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*`);
      details.push(`\`${order.deposit_address}\``);
      details.push(`*–°–µ—Ç—å USDT:* ${order.usdt_network}`);
      details.push(``);
      details.push(`*–í–Ω–∏–º–∞–Ω–∏–µ!* –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ ${order.usdt_network}. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ —É—Ç–µ—Ä—è–Ω—ã.`);
    }

    details.push(`-----------------------------------`);
    details.push(`*–°—Ç–∞—Ç—É—Å:* –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–ù–µ –æ–ø–ª–∞—á–µ–Ω)`);
    details.push(``);
    details.push(`–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);

    return details.join('\n');
  }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS-–ø—Ä–µ–¥–∑–∞–ø—Ä–æ—Å–∞
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  console.log("--- Invoking create-order function ---");

  try {
    // 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { initData, formData } = await req.json();
    if (!initData || !formData) {
      console.error("Validation Error: Missing initData or formData in request body.");
      return new Response(JSON.stringify({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç initData –∏–ª–∏ formData" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }
    console.log("Step 1: Request body parsed successfully.");

    // 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    const isTelegramDataValid = await validateTelegramData(initData);
    if (!isTelegramDataValid) {
      console.error("Authentication Error: Invalid initData received.");
      return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–µ initData" }), {
        status: 401,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }
    console.log("Step 2: Telegram data validated successfully.");

    // 3. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ query_id –∏–∑ initData
    const params = new URLSearchParams(initData);
    const user = JSON.parse(params.get("user")!);
    const queryId = params.get("query_id");

    if (!user || !user.id) {
        console.error("Data Error: Could not extract user data from initData.");
        return new Response(JSON.stringify({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData" }), {
            status: 400,
            headers: { ...corsHeaders, "Content-Type": "application/json" },
        });
    }
    console.log(`Step 3: User data parsed. User ID: ${user.id}, Username: ${user.username || 'N/A'}`);

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–ª—é—á–æ–º
    const supabase = createClient(
      // @ts-ignore
      Deno.env.get("SUPABASE_URL")!,
      // @ts-ignore
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );
    console.log("Step 4: Supabase client created.");

    // 5. Upsert –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    const { error: upsertProfileError } = await supabase
      .from('telegram_profiles')
      .upsert({
        telegram_id: user.id,
        first_name: user.first_name || null,
        last_name: user.last_name || null,
        username: user.username || null,
        language_code: user.language_code || null,
        avatar_url: user.photo_url || null,
        is_premium: user.is_premium || false,
      }, { onConflict: 'telegram_id' });

    if (upsertProfileError) {
      console.error("Database Warning: Failed to upsert Telegram profile.", upsertProfileError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    } else {
      console.log(`Step 5: Telegram profile for user ${user.id} upserted successfully.`);
    }

    // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const publicId = `ORD-${Date.now()}`;
    const orderToInsert = {
      payment_currency: formData.paymentCurrency,
      from_amount: formData.fromAmount,
      calculated_vnd: formData.calculatedVND,
      exchange_rate: formData.exchangeRate,
      delivery_method: formData.deliveryMethod,
      usdt_network: formData.usdtNetwork ?? null,
      vnd_bank_name: formData.vndBankName ?? null,
      vnd_bank_account_number: formData.vndBankAccountNumber ?? null,
      delivery_address: formData.deliveryAddress ?? null,
      contact_phone: formData.contactPhone ?? null,
      public_id: publicId,
      status: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
      telegram_id: user.id,
    };

    const { data: insertedOrder, error: insertError } = await supabase
      .from("orders")
      .insert(orderToInsert)
      .select()
      .single();

    if (insertError) {
      console.error("Database Error: Failed to insert order.", insertError);
      throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${insertError.message}`);
    }
    console.log(`Step 6: Order #${publicId} created successfully in database.`);

    // 7. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const fullOrderDetailsForNotification = {
        ...insertedOrder,
        telegram_user_first_name: user.first_name,
        telegram_username: user.username,
        deposit_address: formData.depositAddress, // –ò–∑ —Ñ–æ—Ä–º—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    };
    
    const clientMessageText = formatOrderForTelegram(fullOrderDetailsForNotification, false);
    console.log("Step 7: Notification data prepared.");

    // 8. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–≤–æ–π–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // 8a. –ß–µ—Ä–µ–∑ answerWebAppQuery (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω queryId)
    if (queryId) {
      await answerWebAppQuery(queryId, {
        type: 'article',
        id: crypto.randomUUID(),
        title: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
        input_message_content: { message_text: clientMessageText, parse_mode: 'Markdown' },
      });
      console.log(`Step 8a: Sent answerWebAppQuery for queryId ${queryId}.`);
    }

    // 8b. –í—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ sendMessage –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await sendMessage(user.id, clientMessageText);
    console.log(`Step 8b: Sent direct message to user ${user.id}.`);

    // 8c. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ADMIN_TELEGRAM_CHAT_ID) {
      const adminMessage = formatOrderForTelegram(fullOrderDetailsForNotification, true);
      await sendMessage(ADMIN_TELEGRAM_CHAT_ID, adminMessage);
      console.log(`Step 8c: Sent notification to admin chat.`);
    }

    // 9. –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    console.log("--- create-order function finished successfully ---");
    return new Response(JSON.stringify(insertedOrder), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("--- CRITICAL ERROR in create-order function ---", error);
    return new Response(JSON.stringify({ error: error.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});