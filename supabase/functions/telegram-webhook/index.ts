// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
// @ts-ignore
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
// @ts-ignore
const ADMIN_TELEGRAM_CHAT_ID = Deno.env.get("ADMIN_TELEGRAM_CHAT_ID");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async function sendMessage(chatId: string | number, text: string): Promise<void> {
  if (!TELEGRAM_BOT_TOKEN) {
    console.error("LOG: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return;
  }
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' }),
    });
    if (!response.ok) {
      const errorData = await response.json();
      console.error(`LOG: –û—à–∏–±–∫–∞ Telegram API (sendMessage) –¥–ª—è chatId ${chatId}:`, JSON.stringify(errorData, null, 2));
    }
  } catch (e) {
    console.error(`LOG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è ${chatId}:`, e);
  }
}

serve(async (req) => {
  try {
    const payload = await req.json();
    console.log("--- –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram ---");

    const message = payload.message;
    if (!message || !message.from) {
      console.log("LOG: –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.");
      return new Response("OK", { status: 200 });
    }

    const senderId = String(message.from.id);
    const adminId = ADMIN_TELEGRAM_CHAT_ID;
    
    const supabase = createClient(
      // @ts-ignore
      Deno.env.get("SUPABASE_URL")!,
      // @ts-ignore
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    // --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---
    if (senderId === adminId) {
      console.log("LOG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      const repliedToMessage = message.reply_to_message;
      if (!repliedToMessage || !repliedToMessage.text) {
        console.log("LOG: Admin message is not a reply or replied-to message has no text. Ignoring.");
        return new Response("OK", { status: 200 });
      }

      const originalText = repliedToMessage.text;
      let orderId: string | null = null;
      let targetTelegramId: string | null = null; // The user ID to send the message to

      // Try to extract orderId and targetTelegramId from a forwarded user message
      const userMessageMatch = originalText.match(/\(ID: `(\d+)`\) –ø–æ –∑–∞–∫–∞–∑—É #(\S+):/);
      if (userMessageMatch) {
        targetTelegramId = userMessageMatch[1];
        orderId = userMessageMatch[2];
        console.log(`LOG: Admin replied to a user message. Target User ID: ${targetTelegramId}, Order ID: ${orderId}`);
      } else {
        // Fallback: Try to extract orderId from an initial order notification (for commands like ok/stop)
        const orderNotificationMatch = originalText.match(/–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #(\S+)/);
        if (orderNotificationMatch) {
          orderId = orderNotificationMatch[1];
          // In this case, targetTelegramId will be fetched from the order itself
          console.log(`LOG: Admin replied to an order notification. Order ID: ${orderId}`);
        }
      }

      if (!orderId) {
        console.log("LOG: Could not determine order ID from replied-to message. Ignoring.");
        return new Response("OK", { status: 200 });
      }

      // Fetch order details to get the actual telegram_id and status
      const { data: order, error: findError } = await supabase
        .from('orders')
        .select('status, telegram_id, admin_conversation_started')
        .eq('order_id', orderId)
        .single();

      if (findError || !order) {
        await sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return new Response("OK", { status: 200 });
      }

      // If targetTelegramId was not extracted from the replied-to message (e.g., it was an order notification),
      // use the order's telegram_id as the target.
      if (!targetTelegramId) {
        targetTelegramId = String(order.telegram_id);
      }

      const replyText = message.text ? message.text.trim() : "";
      const commandText = replyText.toLowerCase();

      // Handle commands first
      if (['ok', '–æ–∫'].includes(commandText)) {
        if (order.status === '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞') {
          await supabase.from('orders').update({ status: '–û–ø–ª–∞—á–µ–Ω' }).eq('order_id', orderId);
          await sendMessage(adminId, `‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.`);
          await sendMessage(order.telegram_id, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${orderId} –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.`);
          if (order.admin_conversation_started) {
            await sendMessage(order.telegram_id, `–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –∑–∞–∫—Ä—ã—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –Ω–µ —É–≤–∏–¥–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.`);
          }
        } else {
          await sendMessage(adminId, `‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId}. –ï–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *${order.status}*.`);
        }
      }
      else if (['stop', '—Å—Ç–æ–ø'].includes(commandText)) {
        if (order.status === '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞') {
          await supabase.from('orders').update({ status: '–û—Ç–º–µ–Ω–µ–Ω' }).eq('order_id', orderId);
          await sendMessage(adminId, `üö´ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ–Ω–µ–Ω.`);
          await sendMessage(order.telegram_id, `üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${orderId} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
          if (order.admin_conversation_started) {
            await sendMessage(order.telegram_id, `–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –∑–∞–∫—Ä—ã—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –Ω–µ —É–≤–∏–¥–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.`);
          }
        } else {
          await sendMessage(adminId, `‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #${orderId}. –ï–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *${order.status}*.`);
        }
      }
      else if (replyText.startsWith('/')) { // This is the old /—Å–æ–æ–±—â–µ–Ω–∏–µ command
        const messageToUser = replyText.substring(1).trim();
        if (messageToUser) {
          const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
          const formattedMessage = `[ADMIN - ${timestamp}]: ${messageToUser}`;
          await supabase.rpc('append_to_chat_history', {
              target_order_id: orderId,
              new_message: formattedMessage
          });
          await sendMessage(targetTelegramId, `*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*\n${messageToUser}`);
          await sendMessage(adminId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞–∫–∞–∑—É #${orderId} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.`);
          if (!order.admin_conversation_started) {
            await supabase.from('orders').update({ admin_conversation_started: true }).eq('order_id', orderId);
          }
        } else {
          await sendMessage(adminId, `‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
        }
      }
      else if (replyText) { // This is the new direct reply logic (non-command)
        console.log(`LOG: Admin sending direct reply to user ${targetTelegramId} for order #${orderId}.`);
        const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        const formattedMessage = `[ADMIN - ${timestamp}]: ${replyText}`;
        await supabase.rpc('append_to_chat_history', {
            target_order_id: orderId,
            new_message: formattedMessage
        });
        await sendMessage(targetTelegramId, `*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*\n${replyText}`);
        await sendMessage(adminId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞–∫–∞–∑—É #${orderId} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.`);
        if (!order.admin_conversation_started) {
          await supabase.from('orders').update({ admin_conversation_started: true }).eq('order_id', orderId);
        }
      } else {
        console.log(`LOG: Admin's reply is empty or not a recognized command. Ignoring.`);
      }
    } 
    // --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ---
    else {
      console.log(`LOG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID: ${senderId}.`);
      const { data: activeOrder, error: activeOrderError } = await supabase
        .from('orders')
        .select('order_id')
        .eq('telegram_id', senderId)
        .eq('status', '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        .eq('admin_conversation_started', true)
        .limit(1)
        .single();

      if (activeOrderError) {
        console.log(`LOG: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${senderId}.`, activeOrderError.message);
      }

      if (activeOrder) {
        console.log(`LOG: –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${senderId} –ø–æ –∑–∞–∫–∞–∑—É #${activeOrder.order_id}. –ü–µ—Ä–µ—Å—ã–ª–∞—é –∏ –ª–æ–≥–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
        
        // 1. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        const formattedMessage = `[USER - ${timestamp}]: ${message.text}`;
        await supabase.rpc('append_to_chat_history', {
            target_order_id: activeOrder.order_id,
            new_message: formattedMessage
        });

        // 2. –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        const userFirstName = message.from.first_name || '';
        const userUsername = message.from.username ? `(@${message.from.username})` : '';
        const forwardMessage = `*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userFirstName} ${userUsername} (ID: \`${senderId}\`) –ø–æ –∑–∞–∫–∞–∑—É #${activeOrder.order_id}:*\n\n${message.text}`;
        await sendMessage(adminId, forwardMessage);
      } else {
        console.log(`LOG: –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.`);
      }
    }

  } catch (e) {
    console.error("--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ telegram-webhook ---", e);
  }

  return new Response("OK", { status: 200 });
});