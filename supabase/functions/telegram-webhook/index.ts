// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
// @ts-ignore
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
// @ts-ignore
const ADMIN_TELEGRAM_CHAT_ID = Deno.env.get("ADMIN_TELEGRAM_CHAT_ID");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// --- –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
const translations = {
  ru: {
    adminOrderNotFound: "‚ùå –û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ #{orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    adminOrderPaid: "‚úÖ –ó–∞–∫–∞–∑ #{orderId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.",
    clientOrderPaid: "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{orderId} –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
    conversationClosed: "–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –∑–∞–∫—Ä—ã—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –Ω–µ —É–≤–∏–¥–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
    cannotChangeStatus: "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{orderId}. –ï–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *{status}*.",
    orderCancelledAdmin: "üö´ –ó–∞–∫–∞–∑ #{orderId} –æ—Ç–º–µ–Ω–µ–Ω.",
    clientOrderCancelled: "üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{orderId} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
    cannotSendEmpty: "‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    messageSent: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞–∫–∞–∑—É #{orderId} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.",
    adminPrefix: "*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*",
    clientMessagePrefix: "*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {userFirstName} {userUsername} (ID: `{senderId}`) –ø–æ –∑–∞–∫–∞–∑—É #{orderId}:*\n\n",
    userNotFoundByUsername: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º `{username}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
    directMessageSent: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è `{username}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
    invalidUsernameFormat: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `@username —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`.",
  },
  en: {
    adminOrderNotFound: "‚ùå Error: Order #{orderId} not found.",
    adminOrderPaid: "‚úÖ Order #{orderId} marked as paid.",
    clientOrderPaid: "‚úÖ Your application #{orderId} has been paid and is being processed.",
    conversationClosed: "The conversation with the administrator for this order is closed. The administrator will no longer see your messages.",
    cannotChangeStatus: "‚ö†Ô∏è Cannot change status of order #{orderId}. Its current status is: *{status}*.",
    orderCancelledAdmin: "üö´ Order #{orderId} cancelled.",
    clientOrderCancelled: "üö´ Your application #{orderId} has been cancelled by the administrator.",
    cannotSendEmpty: "‚ö†Ô∏è Cannot send an empty message.",
    messageSent: "‚úÖ Message sent to client for order #{orderId} and saved in history.",
    adminPrefix: "*Administrator:*",
    clientMessagePrefix: "*Message from client {userFirstName} {userUsername} (ID: `{senderId}`) for order #{orderId}:*\n\n",
    userNotFoundByUsername: "‚ùå User with username `{username}` was not found in the database.",
    directMessageSent: "‚úÖ Message to `{username}` has been sent successfully.",
    invalidUsernameFormat: "‚ùå Invalid format. Use: `@username message text`.",
  },
  vi: {
    adminOrderNotFound: "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #{orderId}.",
    adminOrderPaid: "‚úÖ ƒê∆°n h√†ng #{orderId} ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ thanh to√°n.",
    clientOrderPaid: "‚úÖ ƒê∆°n ƒëƒÉng k√Ω #{orderId} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.",
    conversationClosed: "Cu·ªôc tr√≤ chuy·ªán v·ªõi qu·∫£n tr·ªã vi√™n cho ƒë∆°n h√†ng n√†y ƒë√£ ƒë√≥ng. Qu·∫£n tr·ªã vi√™n s·∫Ω kh√¥ng c√≤n th·∫•y tin nh·∫Øn c·ªßa b·∫°n.",
    cannotChangeStatus: "‚ö†Ô∏è Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng #{orderId}. Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa n√≥ l√†: *{status}*.",
    orderCancelledAdmin: "üö´ ƒê∆°n h√†ng #{orderId} ƒë√£ b·ªã h·ªßy.",
    clientOrderCancelled: "üö´ ƒê∆°n ƒëƒÉng k√Ω #{orderId} c·ªßa b·∫°n ƒë√£ b·ªã qu·∫£n tr·ªã vi√™n h·ªßy.",
    cannotSendEmpty: "‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn tr·ªëng.",
    messageSent: "‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn kh√°ch h√†ng cho ƒë∆°n h√†ng #{orderId} v√† ƒë√£ l∆∞u v√†o l·ªãch s·ª≠.",
    adminPrefix: "*Qu·∫£n tr·ªã vi√™n:*",
    clientMessagePrefix: "*Tin nh·∫Øn t·ª´ kh√°ch h√†ng {userFirstName} {userUsername} (ID: `{senderId}`) cho ƒë∆°n h√†ng #{orderId}:*\n\n",
    userNotFoundByUsername: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ t√™n ng∆∞·ªùi d√πng `{username}` trong c∆° s·ªü d·ªØ li·ªáu.",
    directMessageSent: "‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn `{username}` th√†nh c√¥ng.",
    invalidUsernameFormat: "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: `@username n·ªôi dung tin nh·∫Øn`.",
  }
};

function getLocalizedMessage(lang: string, key: string, params: Record<string, any> = {}): string {
  const langCode = lang.split('-')[0]; // Use base language code
  const messages = translations[langCode as keyof typeof translations] || translations.ru; // Default to Russian
  let message = messages[key as keyof typeof messages] || key; // Fallback to key if not found

  for (const paramKey in params) {
    message = message.replace(`{${paramKey}}`, params[paramKey]);
  }
  return message;
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async function sendMessage(chatId: string | number, text: string): Promise<void> {
  if (!TELEGRAM_BOT_TOKEN) {
    console.error("LOG: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    return;
  }
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' }),
    });
    if (!response.ok) {
      const errorData = await response.json();
      console.error(`LOG: –û—à–∏–±–∫–∞ Telegram API (sendMessage) –¥–ª—è chatId ${chatId}:`, JSON.stringify(errorData, null, 2));
    }
  } catch (e) {
    console.error(`LOG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è ${chatId}:`, e);
  }
}

serve(async (req) => {
  try {
    const payload = await req.json();
    console.log("--- –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram ---");

    const message = payload.message;
    if (!message || !message.from) {
      console.log("LOG: –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.");
      return new Response("OK", { status: 200 });
    }

    const senderId = String(message.from.id);
    const adminId = ADMIN_TELEGRAM_CHAT_ID;
    
    const supabase = createClient(
      // @ts-ignore
      Deno.env.get("SUPABASE_URL")!,
      // @ts-ignore
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    // --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---
    if (senderId === adminId) {
      console.log("LOG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      const messageText = message.text ? message.text.trim() : "";
      const repliedToMessage = message.reply_to_message;

      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ @username
      if (messageText.startsWith('@')) {
        console.log("LOG: Admin is sending a direct message via @username.");
        const parts = messageText.split(/\s+/);
        const usernameWithAt = parts[0];
        const username = usernameWithAt.substring(1);
        const textToSend = parts.slice(1).join(' ');

        if (!username) {
            await sendMessage(adminId, getLocalizedMessage('ru', 'invalidUsernameFormat'));
            return new Response("OK", { status: 200 });
        }
        if (!textToSend) {
          await sendMessage(adminId, getLocalizedMessage('ru', 'cannotSendEmpty'));
          return new Response("OK", { status: 200 });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ telegram_profiles
        const { data: profile, error: profileError } = await supabase
          .from('telegram_profiles')
          .select('telegram_id')
          .eq('username', username)
          .single();

        if (profileError || !profile) {
          console.error(`LOG: Could not find user with username '${username}'.`, profileError);
          await sendMessage(adminId, getLocalizedMessage('ru', 'userNotFoundByUsername', { username: usernameWithAt }));
          return new Response("OK", { status: 200 });
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const targetTelegramId = profile.telegram_id;
        await sendMessage(targetTelegramId, textToSend);
        await sendMessage(adminId, getLocalizedMessage('ru', 'directMessageSent', { username: usernameWithAt }));
      }
      // –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –õ–û–ì–ò–ö–ê: –î–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      else if (repliedToMessage && repliedToMessage.text) {
        console.log("LOG: Admin is replying to a message.");
        const originalText = repliedToMessage.text;
        let orderId: string | null = null;
        let targetTelegramId: string | null = null;

        const userMessageMatch = originalText.match(/\(ID: `(\d+)`\) –ø–æ –∑–∞–∫–∞–∑—É #(\S+):/);
        if (userMessageMatch) {
          targetTelegramId = userMessageMatch[1];
          orderId = userMessageMatch[2];
          console.log(`LOG: Admin replied to a user message. Target User ID: ${targetTelegramId}, Order ID: ${orderId}`);
        } else {
          const orderNotificationMatch = originalText.match(/–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #(\S+)/);
          if (orderNotificationMatch) {
            orderId = orderNotificationMatch[1];
            console.log(`LOG: Admin replied to an order notification. Order ID: ${orderId}`);
          }
        }

        if (!orderId) {
          console.log("LOG: Could not determine order ID from replied-to message. Ignoring.");
          return new Response("OK", { status: 200 });
        }

        const { data: order, error: findError } = await supabase
          .from('orders')
          .select('status, telegram_id, admin_conversation_started')
          .eq('order_id', orderId)
          .single();

        if (findError || !order) {
          await sendMessage(adminId, getLocalizedMessage('ru', 'adminOrderNotFound', { orderId }));
          return new Response("OK", { status: 200 });
        }

        if (!targetTelegramId) {
          targetTelegramId = String(order.telegram_id);
        }

        let targetUserLang = 'ru';
        if (targetTelegramId) {
          const { data: targetUserProfile } = await supabase
            .from('telegram_profiles')
            .select('language_code')
            .eq('telegram_id', targetTelegramId)
            .single();
          if (targetUserProfile?.language_code) {
            targetUserLang = targetUserProfile.language_code;
          }
        }

        const replyText = message.text ? message.text.trim() : "";
        const commandText = replyText.toLowerCase();

        if (['ok', '–æ–∫'].includes(commandText)) {
          if (order.status === '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞') {
            await supabase.from('orders').update({ status: '–û–ø–ª–∞—á–µ–Ω' }).eq('order_id', orderId);
            await sendMessage(adminId, getLocalizedMessage('ru', 'adminOrderPaid', { orderId }));
            await sendMessage(order.telegram_id, getLocalizedMessage(targetUserLang, 'clientOrderPaid', { orderId }));
            if (order.admin_conversation_started) {
              await sendMessage(order.telegram_id, getLocalizedMessage(targetUserLang, 'conversationClosed'));
            }
          } else {
            await sendMessage(adminId, getLocalizedMessage('ru', 'cannotChangeStatus', { orderId, status: order.status }));
          }
        }
        else if (['stop', '—Å—Ç–æ–ø'].includes(commandText)) {
          if (order.status === '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞') {
            await supabase.from('orders').update({ status: '–û—Ç–º–µ–Ω–µ–Ω' }).eq('order_id', orderId);
            await sendMessage(adminId, getLocalizedMessage('ru', 'orderCancelledAdmin', { orderId }));
            await sendMessage(order.telegram_id, getLocalizedMessage(targetUserLang, 'clientOrderCancelled', { orderId }));
            if (order.admin_conversation_started) {
              await sendMessage(order.telegram_id, getLocalizedMessage(targetUserLang, 'conversationClosed'));
            }
          } else {
            await sendMessage(adminId, getLocalizedMessage('ru', 'cannotChangeStatus', { orderId, status: order.status }));
          }
        }
        else if (replyText) {
          console.log(`LOG: Admin sending direct reply to user ${targetTelegramId} for order #${orderId}.`);
          const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
          const formattedMessage = `[ADMIN - ${timestamp}]: ${replyText}`;
          await supabase.rpc('append_to_chat_history', {
              target_order_id: orderId,
              new_message: formattedMessage
          });
          await sendMessage(targetTelegramId, `${getLocalizedMessage(targetUserLang, 'adminPrefix')}\n${replyText}`);
          await sendMessage(adminId, getLocalizedMessage('ru', 'messageSent', { orderId }));
          if (!order.admin_conversation_started) {
            await supabase.from('orders').update({ admin_conversation_started: true }).eq('order_id', orderId);
          }
        } else {
          console.log(`LOG: Admin's reply is empty or not a recognized command. Ignoring.`);
        }
      }
      else {
        console.log("LOG: Admin message is not a reply and does not start with @. Ignoring.");
      }
    } 
    // --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ---
    else {
      console.log(`LOG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID: ${senderId}.`);
      const { data: activeOrder, error: activeOrderError } = await supabase
        .from('orders')
        .select('order_id')
        .eq('telegram_id', senderId)
        .eq('status', '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        .eq('admin_conversation_started', true)
        .limit(1)
        .single();

      if (activeOrderError) {
        console.log(`LOG: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${senderId}.`, activeOrderError.message);
      }

      if (activeOrder) {
        console.log(`LOG: –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${senderId} –ø–æ –∑–∞–∫–∞–∑—É #${activeOrder.order_id}. –ü–µ—Ä–µ—Å—ã–ª–∞—é –∏ –ª–æ–≥–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
        
        const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        const formattedMessage = `[USER - ${timestamp}]: ${message.text}`;
        await supabase.rpc('append_to_chat_history', {
            target_order_id: activeOrder.order_id,
            new_message: formattedMessage
        });

        const userFirstName = message.from.first_name || '';
        const userUsername = message.from.username ? `(@${message.from.username})` : '';
        const forwardMessage = getLocalizedMessage('ru', 'clientMessagePrefix', { userFirstName, userUsername, senderId, orderId: activeOrder.order_id }) + message.text;
        await sendMessage(adminId, forwardMessage);
      } else {
        console.log(`LOG: –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.`);
      }
    }

  } catch (e) {
    console.error("--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ telegram-webhook ---", e);
  }

  return new Response("OK", { status: 200 });
});