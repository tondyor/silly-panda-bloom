// @ts-ignore
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

declare const Deno: {
  env: {
    get(key: string): string | undefined;
  };
};

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

async function sendTelegramMessage(chatId: string | number, text: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN || !chatId) {
    console.error("sendTelegramMessage failed: Missing token or chatId.", { chatId });
    return false;
  }

  try {
    const response = await fetch(TELEGRAM_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error(`Telegram API error for chatId ${chatId}:`, errorData);
      return false;
    }
    
    console.log(`Successfully sent status update to chatId ${chatId}.`);
    return true;
  } catch (error) {
    console.error(`Failed to send telegram message to ${chatId}:`, error);
    return false;
  }
}

function formatStatusUpdateMessage(order: any, newStatus: string, adminNote?: string): string {
  const firstName = order.telegram_user_first_name ? ` ${order.telegram_user_first_name}` : '';
  
  let statusEmoji = "üìã";
  let statusMessage = "";
  
  switch (newStatus) {
    case "–û–ø–ª–∞—á–µ–Ω":
      statusEmoji = "‚úÖ";
      statusMessage = `*${statusEmoji} –û—Ç–ª–∏—á–Ω–æ${firstName}! –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞*`;
      break;
    case "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
      statusEmoji = "‚è≥";
      statusMessage = `*${statusEmoji} –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ${firstName}*`;
      break;
    case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":
      statusEmoji = "üéØ";
      statusMessage = `*${statusEmoji} –û—Ç–ª–∏—á–Ω–æ${firstName}! –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤*`;
      break;
    case "–í—ã–ø–æ–ª–Ω–µ–Ω":
      statusEmoji = "üéâ";
      statusMessage = `*${statusEmoji} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º${firstName}! –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω*`;
      break;
    case "–û—Ç–º–µ–Ω–µ–Ω":
      statusEmoji = "‚ùå";
      statusMessage = `*${statusEmoji} –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω${firstName}*`;
      break;
    default:
      statusMessage = `*üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω${firstName}*`;
  }
  
  const details = [
    statusMessage,
    ``,
    `üìã *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #${order.public_id}`,
    `üìà *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${newStatus}`,
    `üí∞ *–°—É–º–º–∞:* ${order.from_amount.toLocaleString('ru-RU')} ${order.payment_currency}`,
    `üíµ *–ö –ø–æ–ª—É—á–µ–Ω–∏—é:* ${order.calculated_vnd.toLocaleString('vi-VN')} VND`,
  ];

  if (adminNote) {
    details.push(``, `üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${adminNote}`);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  if (newStatus === "–û–ø–ª–∞—á–µ–Ω") {
    details.push(``, `–¢–µ–ø–µ—Ä—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–æ–≤.`);
  } else if (newStatus === "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ") {
    if (order.delivery_method === 'bank') {
      details.push(``, `üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:`);
      details.push(`üè¶ ${order.vnd_bank_name}`);
      details.push(`üí≥ ${order.vnd_bank_account_number}`);
    } else {
      details.push(``, `üöö –ö—É—Ä—å–µ—Ä –≤—ã–µ–∑–∂–∞–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É:`);
      details.push(`üìç ${order.delivery_address}`);
    }
    if (order.contact_phone) {
      details.push(`üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É: ${order.contact_phone}`);
    }
  } else if (newStatus === "–í—ã–ø–æ–ª–Ω–µ–Ω") {
    details.push(``, `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥! üôè`);
    details.push(`–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`);
  }

  details.push(``, `üìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}`);

  return details.join('\n');
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    const body = await req.json();
    const { orderId, newStatus, adminNote } = body;

    if (!orderId || !newStatus) {
      return new Response(
        JSON.stringify({ error: "orderId –∏ newStatus –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const { data: currentOrder, error: fetchError } = await supabase
      .from("orders")
      .select("*")
      .eq("public_id", orderId)
      .single();

    if (fetchError || !currentOrder) {
      console.error("Order fetch error:", fetchError);
      return new Response(
        JSON.stringify({ error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" }),
        { status: 404, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
    if (currentOrder.status === newStatus) {
      return new Response(
        JSON.stringify({ message: "–°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", order: currentOrder }),
        { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const { data: updatedOrder, error: updateError } = await supabase
      .from("orders")
      .update({ 
        status: newStatus, 
        updated_at: new Date().toISOString() 
      })
      .eq("public_id", orderId)
      .select()
      .single();

    if (updateError) {
      console.error("Order update error:", updateError);
      return new Response(
        JSON.stringify({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    console.log(`Order ${orderId} status updated to: ${newStatus}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å telegram_id
    let notificationSent = false;
    let notificationError = null;

    if (updatedOrder.telegram_id) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const { data: telegramUser } = await supabase
        .from("telegram_users")
        .select("first_name")
        .eq("telegram_id", updatedOrder.telegram_id)
        .single();

      const orderWithUserInfo = {
        ...updatedOrder,
        telegram_user_first_name: telegramUser?.first_name || null,
      };

      const statusMessage = formatStatusUpdateMessage(orderWithUserInfo, newStatus, adminNote);
      notificationSent = await sendTelegramMessage(updatedOrder.telegram_id, statusMessage);
      
      if (!notificationSent) {
        notificationError = `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (ID: ${updatedOrder.telegram_id})`;
      }
    } else {
      notificationError = "–£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ Telegram ID";
    }

    return new Response(
      JSON.stringify({
        success: true,
        order: updatedOrder,
        oldStatus: currentOrder.status,
        newStatus: newStatus,
        notificationSent: notificationSent,
        notificationError: notificationError
      }),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );

  } catch (error) {
    console.error("Unexpected error:", error);
    return new Response(
      JSON.stringify({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
